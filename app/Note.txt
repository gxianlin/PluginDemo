组件化与插件化

项目发展：
    项目业务需求的复杂度提升，代码量越来越多，具有通用功能的模块或者重复的功能模块
    ·各种业务，模块耦合在一起，不利于维护与新职员的阅读
    ·一个小小的功能改动，就要全局编译，编译等待时间过长
    ·代码量越来越庞大，需要进行合理拆分
    ·对于测试团队来说，新功能无法单独调试

  组件化与插件化的概念
    组件化：模块组件与通用组件，可分为业务组件与UI组件等等
        比如下拉刷新可作为多个项目使用的UI组件等，如登录模块有多余业务线采用相同的逻辑，可作为业务组件存在，多个团队使用
    插件化：将一个apk划分为不同的apk，比如常用的APP换肤可理解为一个插件apk

    组件化：
        将一个apk拆分为多个模块（组件）进行开发，开发阶段组件可以单独测试，通用组件可进行依赖复用，待开发完毕阶段，将所有模块（组件）进行合并，合并为真正的apk
    组件化开发好处：
        ·业务组件可以单独分配并行开发
        ·单个组件业务可以由开发者自行决定采用MVC/MVP/MVVP架构而不影响整体大局
        ·新职员接手项目分配任务可单独分配某一个模块任务，不必关心整个项目
        ·开发效率提升，开发过程仅仅需要维护开发自己的组件内容
        ·若公司有多个团队，优秀代码组件可快速移植复用
        ·积累个人组件仓库，摆脱粘贴复制的“搬运工”身份
        ·测试可单独测试某个模块

    插件化：
        apk含有多个模块，含有一个主模块和附属模块，每一个模块都是一个apk，开发完毕后将主模块apk和其他模块apk（插件apk）进行打包
    插件化好处：
        ·可对apk进行模块解耦
        ·开发效率提升，可并行开发
        ·可动态升级
        ·按需加载，节省内存
                开源插件化框架：AndroidDynamicLoader、dynamic-load-apk、Small、DynamicApk...

        总结：
            插件化与组件化的最终目的都是为了解耦模块，避免模块之间的依赖耦合，提升团队的开发效率。
          插件化与组件化都可单独的模块进行开发测试，每个模块高度解耦，单独存在不依赖与其他模块进行。

            相对而言，组件化方式更简单，无需关注hook技术，类加载，资源加载等等一系列问题，技术成本相对较低，故此，在大型项目协作开发时，
          个人更倾向于组件化开发。
    开发背景与特点：
    组件化开发背景：
        ·项目越来越大，功能模块越来越多
        ·某单一功能模块在被多个团队开发使用
        ·业务模块耦合严重，单一功能开发依赖于其他模块
        ·开发效率低下，功能改动需要编译整个项目
        ·并行开发过程中，若有人犯错提交代码，可能导致项目暂时停止，不得不停下来协同查找问题
    组件化开发特点：
        （同上组件化优点）
    总结：
        随着技术发展，项目的更新维护，业务的增加，组件化方案是大趋势

        对于组件化技术而言难度不大，难点在于业务的解耦。具体是否选择组件化方式还是要根据项目大小，时间节点来决定

组件化以及第三方SDK的版本控制
    组件化开发中存在多个组件与模块，必须考虑每个模块的统一性，所以需要对每一个module进行support包，第三方SDK配置的统一管理
    统一配置以后供其他组件模块使用：参考config.gradle文件及各组件的build.gradle文件

    当modela作为一个独立项目时MainFirst文件处理：
            1.在项目main/src文件夹下创建两个包：debug和release，将MainFirst文件各放置一份分别处理
            2.将debug文件夹下MainFirst文件配置成正常项目类似
            3.在moduel的build.gradle文件下配置sourceSets节点，用于加载MainFirst文件
            4.再进行一些启动页的配置即可

    组件与主app的application冲突与初始化：
            1.主app添加各module为依赖
            2.将各个module的application的一些初始化操作迁移到主app的application中

    组件与组件之间的资源命名冲突：
            在组件app的build.gradle文件defaultConfig 节点下添加resourcePrefix "modulea_"，创建资源文件会默认添加前缀

    组件与组件之间的跳转通信：
            使用Intent进行跳转通信






